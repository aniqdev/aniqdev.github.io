openapi: 3.0.1


info:
  version: 1.0.0
  title: 'Books catalog API'
  description: 'Books catalog API'
  license: 
    name: ''
    url: 's'
    

servers:
  - url: http://127.0.0.1:8000/api
    description: 'Local server'


paths:

  /books:
    get:
      tags:
        - books
      summary: Get the full list of books
      description: Get the full list of books
      operationId: getBooks
      parameters:
        - name: Content-Type
          in: header
          schema: 
            type: string
            default: aplication/json
        - name: offset
          description: from 0 to books count
          in: query
          schema:
            type: integer
        - name: limit
          description: 1 - 100
          in: query
          schema:
            type: integer
      responses:
        200:
          description: 'Returns the entire list of books'
          content:
            application/json: 
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags:
        - books
      summary: Used to add a new book
      description: Used to add a new book
      operationId: postBooks
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/BookEdit'
      responses:
        '201':
          description: You successefully added a book
          content: 
            application/json: 
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: There were errors validating your book
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
                
  '/books/{id}':
    get:
      tags:
        - books
      summary: Book Details
      description: Book Details
      operationId: getBookDetails
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/Book'
        
      parameters:
        - name: id
          in: path
          description: The id for the book.
          required: true
          schema: 
            type: integer
            example: 25
      responses:
        '200':
          description: Single Book
          content: 
            application/json: 
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Nook not found!
    put:
      tags:
        - books
      summary: Update (replace) a book
      description: Update (replace) a book
      operationId: putBooksId
      parameters:
        - name: id
          in: path
          description: The id for the book you wish to retreive. This is a guid.
          required: true
          schema: 
            type: integer
            example: 10
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/BookEdit'
      responses:
        '202':
          description: Your change has been accepted
        '400':
          description: There were errors processing your request
          content: 
            application/json: 
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - books
      summary: Remove a book from the collection
      description: Remove a book from the collection
      operationId: deleteBooksId
      parameters:
        - name: id
          in: path
          description: The id for the book you wish to retreive. This is a guid.
          required: true
          schema: 
            type: integer
            example: 5
      responses:
        202:
          description: Success
          content: 
            application/json: 
              schema: 
                type: object
                properties: 
                  message:
                    type: string
                    example: Book deleted.
        404:
          description: Error
          content: 
            application/json: 
              schema: 
                type: object
                properties: 
                  message:
                    type: string
                    example: Book not found!
components: 
  headers: 
    Content-Type:
      schema: 
        type: string
        example: application/json
  schemas:

    Book:
      type: object
      required:
        - author
        - id
        - price
        - title
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 'Consequatur mollitia voluptatem eos ipsum'
        authors:
          type: array
          items: 
            type: object
            properties: 
              id:
                type: integer
                example: 5
              name:
                type: string
                example: 'Clark Parker'
        publisher:
          type: object
          properties: 
            id:
              type: integer
              example: 10
            name:
              type: string
              example: 'Fisherfort'

    BookEdit:
      type: object
      required:
        - title
      properties:
        message:
          type: string
          example: 'Book updated.'
        book:
          $ref: '#/components/schemas/Book'
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string  
